# -*- coding: utf-8 -*-
"""task1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DV4HlhYsgQM80_ftVA_yxjmWp9_LJfQi
"""

from collections import deque

# Функція для пошуку збільшуючого шляху (BFS)
def bfs(capacity_matrix, flow_matrix, source, sink, parent):
    visited = [False] * len(capacity_matrix)
    queue = deque([source])
    visited[source] = True

    while queue:
        current_node = queue.popleft()

        for neighbor in range(len(capacity_matrix)):
            # Перевірка, чи є залишкова пропускна здатність у каналі
            if not visited[neighbor] and capacity_matrix[current_node][neighbor] - flow_matrix[current_node][neighbor] > 0:
                parent[neighbor] = current_node
                visited[neighbor] = True
                if neighbor == sink:
                    return True
                queue.append(neighbor)

    return False

# Основна функція для обчислення максимального потоку
def edmonds_karp(capacity_matrix, source, sink):
    num_nodes = len(capacity_matrix)
    flow_matrix = [[0] * num_nodes for _ in range(num_nodes)]  # Ініціалізуємо матрицю потоку нулем
    parent = [-1] * num_nodes
    max_flow = 0

    # Поки є збільшуючий шлях, додаємо потік
    while bfs(capacity_matrix, flow_matrix, source, sink, parent):
        # Знаходимо мінімальну пропускну здатність уздовж знайденого шляху (вузьке місце)
        path_flow = float('Inf')
        current_node = sink

        while current_node != source:
            previous_node = parent[current_node]
            path_flow = min(path_flow, capacity_matrix[previous_node][current_node] - flow_matrix[previous_node][current_node])
            current_node = previous_node

        # Оновлюємо потік уздовж шляху, враховуючи зворотний потік
        current_node = sink
        while current_node != source:
            previous_node = parent[current_node]
            flow_matrix[previous_node][current_node] += path_flow
            flow_matrix[current_node][previous_node] -= path_flow
            current_node = previous_node

        # Збільшуємо максимальний потік
        max_flow += path_flow

    return max_flow

capacity_matrix = [
    #T1,T2,C1,C2,C3,C4,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14
    [0,0,25,20,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #T1
    [0,0,0,10,15,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #T2
    [0,0,0,0,0,0,15,10,20,0,0,0,0,0,0,0,0,0,0,0], #C1
    [0,0,0,0,0,0,0,0,0,15,10,25,0,0,0,0,0,0,0,0], #C2
    [0,0,0,0,0,0,0,0,0,0,0,0,20,15,10,0,0,0,0,0], #C3
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,10,15,5,10], #C4
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #M1
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #M2
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #M3
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #M4
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #M5
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #M6
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #M7
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #M8
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #M9
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #M10
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #M11
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #M12
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #M13
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #M1
]

for i in range(0,2):
    sum = 0
    for j in range(6,21):
        res = edmonds_karp(capacity_matrix, i, j)
        sum += res
        if res > 0:
            print(f"Від Терміналу {i + 1} | До Магазину {j - 5} | Пропускна здатність (одиниць): {res}")

    print(f"Потік з терміналу {i + 1}: {sum} одиниць.")

"""Враховуючи, що від терміналу до кожного магазину є тільки 1 доступний маршрут, даний алгоритм фактично не шукає оптимальний маршрут, а лише показує пропускну здатність єдиного маршруту.

Відповіді на питання:
1. Термінали 1 і 2. І термінал 1, і термінал 2 по 130 одиниць товару.
2. Наменшу пропускну здатність має маршрут між складом 4 та магазином 13 - лише 5.
3. Відповідно, магазин 13 отримує найменше одиниць товару.
4. Відповідно збільшивши пропускну здатність цього маршруту (С4 - М13), можна покращити загальну ефективність логістичної мережі.
"""